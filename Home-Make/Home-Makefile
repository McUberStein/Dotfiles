#-------------------McUberStein's Home-Makefile--------------------------------#


## Does a number of things ranging from compilation and cleaning to image-to-ASCII conversion and file compression
## To use, invoke "make -C ~/ <recipe>" or make an alias homemake='make -C ~/'

#--------------------------------##"FUNCTIONS"--------------------------------#

define verbose=
$(if $(LOGLEVEL1),$(call printInfo,$(1),$(2),$(3)))
$(if $(LOGLEVEL2),$(call printInfo,$(1)$(2),$(3)))
$(if $(LOGLEVEL3),$(call printInfo,$(1)$(2)$(3)))
endef

define checkFor=
$(shell if ! command -v $(1); then $(2); else $(3); fi)
endef

define verifyConts=
@$(shell $(call verbose,$(upline),,\nCopying $(1).tar.xz to $(4)) > /dev/tty; cp ~/Documents/Tarballs/$(1).tar.xz $(4)/; $(call verbose,$(upline),,\nEntering $(4)...) > /dev/tty; cd $(4); $(call verbose,$(upline),,\nExtracting $(1).tar.xz...) > /dev/tty; tar -xf $(1).tar.xz;  $(call verbose,Verifying $(1).tar.xz, in $(4)...) > /dev/tty; if diff -r $(4)/$(2) $(3) > /dev/null; then printf "$(begin_green_bold)Contents of $(2) tarball and $(2) directory match$(end_color)\n" > /dev/tty; rm -rf $(4)/$(2); rm $(4)/$(1).tar.xz; else printf "$(begin_red_bold)Contents of $(2) tarball and $(2) directory do not match!$(end_color)\n" > /dev/tty; rm -rf $(4)/$(2); rm $(4)/$(1).tar.xz; fi)
endef

define regenTar=
@tar -C $(1) -cJvf $(2) $(3)
@mv ~/$(2) ~/Documents/Tarballs/
@printf "$(begin_green_bold)$(3) tarball up to date$(end_color)\n"
endef

define printWarn=
printf "$(begin_red_bold)$(1)\n$(end_color)"
endef

define printInfo=
printf "$(begin_cyan)$(1)\n$(end_color)"
endef

define rand=
$(shell echo $$(( 1 + $$RANDOM % $(1))))
endef

define randBool=
$(shell number="$(call rand,100)"; if [[ $$number < 50 ]]; then echo true; else echo false; fi)
endef

define verbCommand=
$(shell if [[ "$(LOGLEVEL1)" = 1 ]] || [[ "$(LOGLEVEL2)" = 1 ]] || [[ "$(LOGLEVEL3)" = 1 ]]; then $(1) > /dev/tty; else $(1) &> /dev/null; fi)
endef

#--------------------------------##VARIABLES##--------------------------------#


SHELL:=/bin/bash
MAKEFLAGS += --no-print-directory


filler = echo e > /dev/null
upline = \033[A
begin_white_bold = \e[1;37m
begin_green = \001\e[0;32m\002
begin_green_bold = \e[1;32m
begin_red = \e[0;31m
begin_red_bold = \e[1;31m
begin_blue = \e[0;34m
begin_blue_bold = \e[1;34m
begin_purple = \e[0;35m
begin_purple_bold = \e[1;35m
begin_cyan = \001\e[0;36m\002
begin_cyan_bold = \e[1;36m
begin_black = \e[0;30m
begin_gray = \e[1;30m
begin_yellow = \e[0;33m
begin_yellow_bold = \e[1;33m
end_color = \001\e[0m\002
backupDIR = ~/Pictures/LOST.DIR/DIR/Backup/A/H/BACKUP
metadir = "$(shell bash -c 'cd $(PWD) && read -e -p "Directory to purge metadata from: " DIR; echo $$DIR')"
osudir = "$(shell bash -c 'cd $(PWD) && read -e -p "Input path to Osu AppImage: " DIR; echo $$DIR')"
difference = $(shell diff --unchanged-group-format= --changed-group-format=%\> \
  --new-line-format='%l ' -biw ~/.tmpfile ~/.tmpfile2)
tardir ?= "$(shell bash -c 'cd $(PWD) && read -e -p "Which file/directory should be archived?: " DIR; echo $$DIR')"
tarname_xz ?= "$(shell bash -c 'read -p "What should the archive be called?: " NAME; echo $$NAME').tar.xz"
tarname_gz ?= "$(shell bash -c 'read -p "What should the archive be called?: " NAME; echo $$NAME').tar.gz"
tarname ?= "$(shell bash -c 'read -p "What should the archive be called?: " NAME; echo $$NAME').tar"
7zname ?= "$(shell bash -c 'read -p "What should the archive be called?: " NAME; echo $$NAME').7z"
gifinput ?= $(shell cd $(PWD) && read -e -r -p "Which file to convert to GIF?: " INP; echo $$INP)
gifname  ?= "$(shell bash -c 'read -p "What should the GIF be called? " GNAME; echo $$GNAME').gif"
sysname = $(shell hostname)
usr = $(shell whoami)
arguments = $(filter-out $@,$(MAKECMDGOALS))
current_recipe = $(MAKECMDGOALS)
LOGBUFFER = /tmp/homemake.log
NOVERBOSE = $(call verbose,No verbose output for this recipe,,)

#--------------------------##CONDITIONAL_RULES##----------------------------#


ifeq ($(V), 1)
LOGLEVEL1=1
endif

ifeq ($(V), 2)
LOGLEVEL2=1
endif

ifeq ($(V), 3)
LOGLEVEL3=1
endif

ifneq ($(into),)
OUT=-o $(PWD)/$(into)
else
OUT=-o $(PWD)/bin
endif

ifneq ($(with),)
LIB=-l $(with)
else
LIB :=
endif


#--------------------------------##RECIPES##--------------------------------#


help: ## Show this help screen
	@printf "$(begin_green_bold)Welcome to the Home-Make file!$(begin_white_bold)\nThis Makefile can do a number of things ranging from compressing files to changing the CPU scaling governor.\n\n$(begin_blue_bold)Available recipes are:$(end_color)\n"
	@egrep -h '\s##\s' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@printf "\n$(begin_green)Some recipes support verbose output.\nTo use it, provide V as a command line parameter like:\n$(begin_cyan_bold)\"V=1-3\"$(end_color)\n"
	@$(NOVERBOSE)

nothing: ## Does absolutely nothing
	@printf "You have made$(begin_blue_bold) nothing$(end_color). Congrats!\n"
	@$(NOVERBOSE)

merge: ## Compiles all .c files in current directory
	@gcc $(PWD)/*.c $(OUT) $(LIB)
	@$(NOVERBOSE)

gif_simple: ## Makes a simple, small, low-quality GIF
	@$(shell $(call printInfo,Mp4 files:) > /dev/tty)
	@$(shell ls $(PWD) | grep .mp4 > /dev/tty)
	@$(shell ffmpeg -i $(PWD)/$(gifinput) $(PWD)/$(gifname))
	@$(shell $(call printInfo,GIF made!) > /dev/tty)

gif_palette: ## Makes a relatively large, lossles, 30FPS GIF
	@$(shell $(call printInfo,Mp4 files:) > /dev/tty)
	@$(shell ls $(PWD) | grep .mp4 > /dev/tty)
	@$(shell ffmpeg -i $(PWD)/$(gifinput) -filter_complex "[0:v] split [a][b];[a] palettegen,fps=30 [p];[b][p] paletteuse,fps=30" $(PWD)/$(gifname))
	@$(shell $(call printInfo,GIF made!) > /dev/tty)

gif_mirror: ## Make a lossles GIF with the same FPS as source
	@$(shell $(call printInfo,Mp4 files:) > /dev/tty)
	@$(shell ls $(PWD) | grep .mp4 > /dev/tty)
	@$(shell ffmpeg -i $(PWD)/$(gifinput) -filter_complex "[0:v] split [a][b];[a] palettegen [p];[b][p] paletteuse" $(PWD)/$(gifname))
	@$(shell $(call printInfo,GIF made!) > /dev/tty)

tar_xz: ## Makes a tar.xz file
	$(shell echo "Files: $(shell ls $(PWD))" > $(shell tty))
	$(shell tar -cJvf $(tarname_xz) -C $(PWD) $(tardir) > $(shell tty))
	$(shell mv ~/*.tar.xz $(PWD)/)

tar_gz: ## Makes a tar.gz file
	$(shell echo "Files: $(shell ls $(PWD))" > $(shell tty))
	$(shell tar -czvf $(tarname_gz) -C $(PWD) $(tardir) > $(shell tty))
	$(shell mv ~/*.tar.gz $(PWD)/)

tar: ## Makes a tar file
	$(shell echo "Files: $(shell ls $(PWD))" > $(shell tty))
	$(shell tar -czvf $(tarname) -C $(PWD) $(tardir) > $(shell tty))
	$(shell mv ~/*.tar $(PWD)/)

7z_max: ## Make .7z archive with max compression
	@echo "Files: $(shell ls $(PWD) > /dev/tty)"
	@7z a $(7zname) -m0=LZMA -mx=9 $(PWD)/$(tardir)
	@mv ~/*.7z $(PWD)/

ascii: ## Converts an image to colorless ascii art
	@exec ~/.local/bin/ascii-image-converter -cf $(PWD)/$(arguments)

ascii_braille: ## Converts an image to colorless braille art
	@exec ~/.local/bin/ascii-image-converter -cbf $(PWD)/$(arguments)

caca: ## Converts an image to colorful ascii art
	@exec ~/.local/bin/ascii-image-converter -Ccf $(PWD)/$(arguments)

caca_braille: ## Converts an image to colorful braille art
	@exec ~/.local/bin/ascii-image-converter -Cbcf $(PWD)/$(arguments)

menu: ## Shows the Menu of Doom
	@exec ~/ResetPC
	@$(NOVERBOSE)

menu_update: ## Updates the Menu of Doom program
	@$(call verbose,Entering ~/Documents/Programming/C++/menu++, and compiling menu.cpp, with G++)
	@make -C ~/Documents/Programming/C++/menu++
	@$(call verbose,Moving compiled bin++,, to ~/ResetPC)
	@mv ~/Documents/Programming/C++/menu++/bin++ ~/ResetPC
	@printf "$(begin_green_bold)Menu updated!$(end_color)\n"

random_number: ## Print a random number between 1 and 100
	@printf "$(call rand,100)\n"
	@$(NOVERBOSE)

emacs_clean: ## Cleans Emacs auto-save remnant files
	@rm $(PWD)/*~
	@$(NOVERBOSE)

doomacs_prime: ## Prepares the Doomacs daemon
	@$(call verbCommand,exec /usr/bin/emacs --with-profile doomacs --daemon)
	@printf "$(begin_cyan_bold)Doomacs primed\n$(end_color)"

spacemacs_prime: ## Prepares the Spacemacs daemon
	@$(call verbCommand,exec /usr/bin/emacs --with-profile spacemacs --daemon)
	@printf "$(begin_blue_bold)Spacemacs primed\n$(end_color)"

emacs_prime: ## Prepares the Vanilla Emacs daemon
	@$(call verbCommand,exec /usr/bin/emacs --with-profile default --daemon)
	@printf "$(begin_yellow_bold)Vanilla Emacs primed$(end_color)\n"

emacs_prime_all: ## Prepares all the Emacs daemons
	@$(MAKE) spacemacs_prime
	@$(MAKE) doomacs_prime
	@$(MAKE) emacs_prime
	@printf "$(begin_cyan_bold)All $(begin_blue_bold)Emacs $(begin_yellow_bold)servers $(begin_red_bold)primed$(end_color)\n"

emacs_kill: ## Kills the Emacs daemon
	@killall emacs
	@echo "All instances of Emacs killed"
	@$(NOVERBOSE)

emacs_restart: ## Kills and prepares all Emacs daemons
	@$(MAKE) emacs_kill
	@$(MAKE) emacs_prime_all

picom_start: ## Starts Picom with experimental backends
	@$(call verbose,Starting Picom, with experimental backends,. Death to Nvidia)
	@exec /usr/local/bin/picom -b --experimental-backends
	@echo "Picom started"

picom_stop: ## Stops Picom
	@killall picom
	@echo "Picom stopped"
	@$(NOVERBOSE)

osu_update: ## Updates Osu Lazer
	@cd /var/tmp && git clone https://github.com/ppy/osu.git
	-@cd /var/tmp/osu && dotnet restore && dotnet build
	@$(call printInfo,Please enter password to move Osu dir to /opt and link to /usr/local/bin)
	@doas mv /var/tmp/osu/osu.Desktop/bin/Debug/net6.0/ /opt/Osu!Lazer-Debug
	@doas rm /usr/local/bin/osu! && doas ln -s /opt/Osu!Lazer-Debug/osu\! /usr/local/bin/osu!
	@rm -rf /var/tmp/osu
	@printf "$(begin_green_bold)Osu Lazer(Debug) updated successfully!\n$(end_color)"

hide_wallpaper: ## Hides your anime wallpaper.WIN + SHIFT + R to reset
	@feh --bg-fill ~/Pictures/Archbian.png

purge_meta: ## Purges metadata from a directory
	@mid3v2 -D $(PWD)/$(metadir)/*
	@$(NOVERBOSE)

phone_mount: ## Mounts a phone to Public using jmtpfs
	@$(shell /usr/bin/jmtpfs -o nonempty /home/patrik/Public)

retar_music: ## Regenerates the Music tarball
	@$(call regenTar,~/,musicteerball.tar.xz,Music)
	@$(MAKE) verify_music

verify_music: ## Checks contents of Music tarball
	@$(call verifyConts,musicteerball,Music,~/Music,/tmp)

random_ecchi: ## Shows a random Ecchi image. Nice!
	@ls $(backupDIR)/Ecchi > /tmp/ecchidir
	@awk 'NR==$(call rand,192) {print $0}' /tmp/ecchidir > /tmp/randomecchi
	@$(call verbose,Opened $(shell cat /tmp/randomecchi), with Nomacs,. Best image viewer)
	@$(call verbCommand,nomacs $(backupDIR)/Ecchi/$(shell cat /tmp/randomecchi))

retar_literature: ## Regenerates the Literature tarball
	@$(call regenTar,$(backupDIR),literaturetervaball.tar.xz,Literature)
	@$(MAKE) verify_literature

verify_literature: ## Checks contents of Literature tarball
	@$(call verifyConts,literaturetervaball,Literature,$(backupDIR)/Literature,/tmp)

retar_ecchi: ## Regenerates the Ecchi tarball
	@$(call regenTar,$(backupDIR),ecchitervaball.tar.xz,Ecchi)
	@$(MAKE) verify_ecchi

verify_ecchi: ## Checks contents of Ecchi tarball
	@$(call verifyConts,ecchitervaball,Ecchi,$(backupDIR)/Ecchi,/tmp)

retar_legacy: ## Regenerates the Legacy tarball
	@$(call regenTar,~/Videos,legacyteerball.tar.xz,Legacy)
	@$(MAKE) verify_legacy

verify_legacy: ## Checks contents of Legacy tarball
	@$(call verifyConts,legacyteerball,Legacy,~/Videos/Legacy,/var/tmp)

retar_deprecated:
	@$(call regenTar,$(backupDIR),deprecatedteerball.tar.xz,Deprecated)
	@$(MAKE) verify_deprecated

verify_deprecated:
	@$(call verifyConts,deprecatedteerball,Deprecated,$(backupDIR)/Deprecated,/var/tmp)

retar_vid: ## Regenerates the Vid tarball
	@$(call regenTar,$(backupDIR),vidtarubaru.tar.xz,Vid)
	@$(MAKE) verify_vid

verify_vid: ## Verifies contents of Vid tarball
	@$(call verifyConts,vidtarubaru,Vid,$(backupDIR)/Vid,/var/tmp)

retar_anime: ## Regenerates the Anime tarball
	@$(call regenTar,$(backupDIR),animetarubaru.tar.xz,Anime)
	@$(MAKE) verify_anime

verify_anime: ## Verifies contents of Anime tarball
	@$(call verifyConts,animetarubaru,Anime,$(backupDIR)/Anime,/var/tmp)

retar_games: ## Regenerates the Game tarball
	@$(call regenTar,$(backupDIR),gametarubaru.tar.xz,Games)
	@$(MAKE) verify_games

verify_games: ## Verifies contents of Game tarball
	@$(call verifyConts,gametarubaru,Games,$(backupDIR)/Games,/var/tmp)

afterdeath:
	@mono /home/patrik/.local/share/last/last

last_update:
	@$(MAKE) -C /home/patrik/.local/share/last/
	@printf "$(begin_green_bold)Last will updated!$(end_color)\n"

cpu_temp: ## Shows the current CPU temperature
	@cat /sys/class/thermal/thermal_zone{2,3,4,5,6,7,8,9}/temp | awk '{print substr($$0, 1, 2)"."substr($$0, 3, 1)"°C"}'

cpu_temp_const: ## Constantly shows the CPU temperature
	@sleep 0.2
	@$(MAKE) cpu_temp
	@$(MAKE) cpu_temp_const

cpu_govern: ## Shows the current scaling governor of all cpu cores
	@cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor

coinflip: ## Flip a coin, basically
	@if [[ $(call randBool) == true ]]; then printf "$(begin_cyan_bold)\nHeads\n\n$(end_color)"; else printf "$(begin_yellow_bold)\nTails\n$(end_color)\n"; fi

verify_all: ## Calls all verify recipes
	@$(call printWarn,Warning! This will take a while)
	@$(MAKE) verify_literature	
	@$(MAKE) verify_ecchi
	@$(MAKE) verify_music
	@$(MAKE) verify_legacy
	@$(MAKE) verify_anime
	@$(MAKE) verify_vid
#	@$(MAKE) verify_games #Save files cause false negatives
	@$(MAKE) verify_deprecated

retar_all: ## Regenerates all tarballs
	@$(call printWarn,Warning! This will take a while)
	@$(call regenTar,~/,musicteerball.tar.xz,Music)
	@$(call regenTar,$(backupDIR),ecchitervaball.tar.xz,Ecchi)
	@$(call regenTar,~/Videos,legacyteerball.tar.xz,Legacy)
	@$(call regenTar,$(backupDIR),animetarubaru.tar.xz,Anime)
	@$(call regenTar,$(backupDIR),vidtarubaru.tar.xz,Vid)
	@$(call regenTar,$(backupDIR),gametarubaru.tar.xz,Games)
	@$(call regenTar,$(backupDIR),literaturetervaball.tar.xz,Literature)


#--------------------------------##SUDO_RECIPES##--------------------------------#


phone_umount: ## Unmounts jmtpfs mount from Public
	@$(shell umount /home/patrik/Public)

cpu_powersave: ## Sets all cpu cores to powersave mode
	@$(shell cpufreq-set -c 0 -g powersave && cpufreq-set -c 1 -g powersave && cpufreq-set -c 2 -g powersave && cpufreq-set -c 3 -g powersave && cpufreq-set -c 4 -g powersave && cpufreq-set -c 5 -g powersave && cpufreq-set -c 6 -g powersave && cpufreq-set -c 7 -g powersave)

cpu_performance: ## Sets all cpu cores to performance mode
	@$(shell cpufreq-set -c 0 -g performance && cpufreq-set -c 1 -g performance && cpufreq-set -c 2 -g performance && cpufreq-set -c 3 -g performance && cpufreq-set -c 4 -g performance && cpufreq-set -c 5 -g performance && cpufreq-set -c 6 -g performance && cpufreq-set -c 7 -g performance)

cpu_normal: ## Sets all cpu cores to schedutil mode
	@$(shell cpufreq-set -c 0 -g schedutil && cpufreq-set -c 1 -g schedutil && cpufreq-set -c 2 -g schedutil && cpufreq-set -c 3 -g schedutil && cpufreq-set -c 4 -g schedutil && cpufreq-set -c 5 -g schedutil && cpufreq-set -c 6 -g schedutil && cpufreq-set -c 7 -g schedutil)
